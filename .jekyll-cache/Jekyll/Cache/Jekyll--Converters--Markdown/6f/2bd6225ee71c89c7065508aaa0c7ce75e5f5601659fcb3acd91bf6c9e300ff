I"½x<h1 id="validations">Validations</h1>

<p>DataMapper validations allow you to vet data prior to saving to a database. To
make validations available to your app you simply â€˜<code class="highlighter-rouge">require "dm-validations"</code>â€™
in your application. With DataMapper there are two different ways you can
validate your classesâ€™ properties.</p>

<h2 id="manual-validation">Manual Validation</h2>

<p>Much like a certain other Ruby ORM we can call validation methods directly by
passing them a property name (or multiple property names) to validate against.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>  <span class="n">validates_length_of</span> <span class="ss">:name</span>
  <span class="n">validates_length_of</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:description</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>These are the currently available manual validations. Please refer to
the <a href="http://rubydoc.info/gems/dm-validations/frames">API docs</a> for more detailed
information.</p>

<ul>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesAbsence">validates_absence_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesAcceptance">validates_acceptance_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesWithBlock">validates_with_block</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesConfirmation">validates_confirmation_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesFormat">validates_format_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesLength">validates_length_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesWithMethod">validates_with_method</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesNumericality">validates_numericality_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesPrimitiveType">validates_primitive_type_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesPresence">validates_presence_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesUniqueness">validates_uniqueness_of</a></li>
  <li><a href="http://rubydoc.info/gems/dm-validations/DataMapper/Validations/ValidatesWithin">validates_within</a></li>
</ul>

<h2 id="auto-validations">Auto-Validations</h2>

<p>By adding triggers to your property definitions you can both define and validate
your classes properties all in one fell swoop.</p>

<p>Triggers that generate validator creation:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="c1"># implicitly creates a validates_presence_of</span>
  <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span>  <span class="c1"># cannot be nil</span>

  <span class="c1"># implicitly creates a (scoped) validates_uniqueness_of</span>
  <span class="c1"># a symbol value (or an array of symbols) must denote</span>
  <span class="c1"># one or more of the resource's properties and will</span>
  <span class="c1"># be passed on as the :scope option to validates_uniqueness</span>
  <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="kp">true</span>            <span class="c1"># must be unique</span>
  <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="ss">:some_scope</span>     <span class="c1"># must be unique within some_scope</span>
  <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="ss">:some</span><span class="p">,</span> <span class="ss">:scope</span><span class="p">]</span> <span class="c1"># must be unique within [:some, :scope]</span>

  <span class="c1"># implicitly creates a validates_length_of</span>
  <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">..</span><span class="mi">20</span>  <span class="c1"># must be between 0 and 20 characters in length</span>
  <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">..</span><span class="mi">20</span>  <span class="c1"># must be between 1 and 20 characters in length</span>

  <span class="c1"># implicitly creates a validates_format_of</span>
  <span class="ss">:format</span> <span class="o">=&gt;</span> <span class="ss">:email_address</span>  <span class="c1"># predefined regex</span>
  <span class="ss">:format</span> <span class="o">=&gt;</span> <span class="ss">:url</span>            <span class="c1"># predefined regex</span>
  <span class="ss">:format</span> <span class="o">=&gt;</span> <span class="sr">/\w+_\w+/</span>
  <span class="ss">:format</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span> <span class="n">str</span> <span class="p">}</span>
  <span class="ss">:format</span> <span class="o">=&gt;</span> <span class="nb">proc</span> <span class="p">{</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span> <span class="n">str</span> <span class="p">}</span>
  <span class="ss">:format</span> <span class="o">=&gt;</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span> <span class="n">str</span> <span class="p">}</span></code></pre></figure>

<p>Here we see an example of a class with both a manual and auto-validation declared:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>  <span class="nb">require</span> <span class="s1">'dm-validations'</span>

  <span class="k">class</span> <span class="nc">Account</span>
    <span class="kp">include</span> <span class="no">DataMapper</span><span class="o">::</span><span class="no">Resource</span>

    <span class="n">property</span> <span class="ss">:name</span><span class="p">,</span> <span class="no">String</span>

    <span class="c1"># good old fashioned manual validation</span>
    <span class="n">validates_length_of</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:max</span> <span class="o">=&gt;</span> <span class="mi">20</span>

    <span class="n">property</span> <span class="ss">:content</span><span class="p">,</span> <span class="no">Text</span><span class="p">,</span> <span class="ss">:length</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="o">..</span><span class="mi">500</span>
  <span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="validating">Validating</h2>

<p>DataMapper validations, when included, alter the default save/create/update
process for a model.</p>

<p>You may manually validate a resource using the <code class="highlighter-rouge">valid?</code> method, which will
return true if the resource is valid, and false if it is invalid.</p>

<h2 id="working-with-validation-errors">Working with Validation Errors</h2>

<p>If your validators find errors in your model, they will populate the
<code class="highlighter-rouge">Validate::ValidationErrors</code> object that is available
through each of your models via calls to your modelâ€™s <code class="highlighter-rouge">errors</code> method.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>  <span class="n">my_account</span> <span class="o">=</span> <span class="no">Account</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">'Jose'</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">my_account</span><span class="p">.</span><span class="nf">save</span>
    <span class="c1"># my_account is valid and has been saved</span>
  <span class="k">else</span>
    <span class="n">my_account</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
      <span class="nb">puts</span> <span class="n">e</span>
    <span class="k">end</span>
  <span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="error-messages">Error Messages</h2>

<p>The error messages for validations provided by DataMapper are generally clear,
and explain exactly what has gone wrong. If theyâ€™re not what you want though,
they can be changed. This is done via providing a <code class="highlighter-rouge">:message</code> in the options
hash, for example:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="n">validates_uniqueness_of</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="ss">:section_id</span><span class="p">,</span>
    <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">"There's already a page of that title in this section"</span></code></pre></figure>

<p>This example also demonstrates the use of the <code class="highlighter-rouge">:scope</code> option to only check the
propertyâ€™s uniqueness within a narrow scope. This object wonâ€™t be valid if
another object with the same @section_id@ already has that title.</p>

<p>Something similar can be done for auto-validations, too, via setting <code class="highlighter-rouge">:messages</code>
in the property options.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="n">property</span> <span class="ss">:email</span><span class="p">,</span> <span class="no">String</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:unique</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
    <span class="ss">:format</span>   <span class="o">=&gt;</span> <span class="ss">:email_address</span><span class="p">,</span>
    <span class="ss">:messages</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="ss">:presence</span>  <span class="o">=&gt;</span> <span class="s2">"We need your email address."</span><span class="p">,</span>
      <span class="ss">:is_unique</span> <span class="o">=&gt;</span> <span class="s2">"We already have that email."</span><span class="p">,</span>
      <span class="ss">:format</span>    <span class="o">=&gt;</span> <span class="s2">"Doesn't look like an email address to me ..."</span>
    <span class="p">}</span></code></pre></figure>

<p>To set an error message on an arbitrary field of the model, DataMapper provides
the <code class="highlighter-rouge">add</code> command.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre>  <span class="vi">@resource</span><span class="p">.</span><span class="nf">errors</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="s2">"Doesn't mention DataMapper"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This is probably of most use in custom validations, so â€¦</p>

<h2 id="custom-validations">Custom Validations</h2>

<p>DataMapper provides a number of validations for various common situations such
as checking for the length or presence of strings, or that a number falls in a
particular range. Often this is enough, especially when validations are combined
together to check a field for a number of properties. For the situations where
it isnâ€™t, DataMapper provides a couple of methods: <code class="highlighter-rouge">validates_with_block</code> and
<code class="highlighter-rouge">validates_with_method</code>. Theyâ€™re very similar in operation, with one accepting a
block as the argument and the other taking a symbol representing a method name.</p>

<p>The method or block performs the validation tests and then should return <code class="highlighter-rouge">true</code>
if the resource is valid or <code class="highlighter-rouge">false</code> if it is invalid. If the resource isnâ€™t
valid instead of just returning <code class="highlighter-rouge">false</code>, an array containing <code class="highlighter-rouge">false</code> and an
error message, such as <code class="highlighter-rouge">[ false, 'FAIL!' ]</code> can be returned. This will add the
message to the <code class="highlighter-rouge">errors</code> on the resource.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre>  <span class="k">class</span> <span class="nc">WikiPage</span>
    <span class="kp">include</span> <span class="no">DataMapper</span><span class="o">::</span><span class="no">Resource</span>

    <span class="c1"># properties ...</span>

    <span class="n">validates_with_method</span> <span class="ss">:check_citations</span>

    <span class="c1"># checks that we've included at least 5 citations for our wikipage.</span>
    <span class="k">def</span> <span class="nf">check_citations</span>
      <span class="c1"># in a 'real' example, the number of citations might be a property set by</span>
      <span class="c1"># a before :valid? hook.</span>
      <span class="n">num</span> <span class="o">=</span> <span class="n">count_citations</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="nf">body</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">4</span>
        <span class="k">return</span> <span class="kp">true</span>
      <span class="k">else</span>
        <span class="p">[</span> <span class="kp">false</span><span class="p">,</span> <span class="s2">"You must have at least </span><span class="si">#{</span><span class="mi">5</span> <span class="o">-</span> <span class="n">num</span><span class="si">}</span><span class="s2"> more citations for this article"</span> <span class="p">]</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Instead of setting an error on the whole resource, you can set an error on an
individual property by passing this as the first argument to
<code class="highlighter-rouge">validates_with_block</code> or <code class="highlighter-rouge">validates_with_method</code>. To use the previous example,
replacing line 5 with:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="n">validates_with_method</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:method</span> <span class="o">=&gt;</span> <span class="ss">:check_citations</span></code></pre></figure>

<p>This would result in the citations error message being added to the error
messages for the body, which might improve how it is presented to the user.</p>

<h2 id="conditional-validations">Conditional Validations</h2>

<p>Validations donâ€™t always have to be run. For example, an issue tracking system
designed for git integration might require a commit identifier for the fixâ€“but
only for a ticket which is being set to â€˜completeâ€™. A new, open or invalid
ticket, of course, doesnâ€™t necessarily have one. To cope with this situation and
others like it, DataMapper offers conditional validation, using the <code class="highlighter-rouge">:if</code> and
<code class="highlighter-rouge">:unless</code> clauses on a validation.</p>

<p><code class="highlighter-rouge">:if</code> and <code class="highlighter-rouge">:unless</code> take as their value a symbol representing a method name or a
Proc. The associated validation will run only if (or unless) the method or Proc
returns something which evaluates to <code class="highlighter-rouge">true</code>. The chosen method should take no
arguments, whilst the Proc will be called with a single argument, the resource
being validated.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>  <span class="k">class</span> <span class="nc">Ticket</span>
    <span class="kp">include</span> <span class="no">DataMapper</span><span class="o">::</span><span class="no">Resource</span>

    <span class="n">property</span> <span class="ss">:id</span><span class="p">,</span>          <span class="no">Serial</span>
    <span class="n">property</span> <span class="ss">:title</span><span class="p">,</span>       <span class="no">String</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span>
    <span class="n">property</span> <span class="ss">:description</span><span class="p">,</span> <span class="no">Text</span>
    <span class="n">property</span> <span class="ss">:commit</span><span class="p">,</span>      <span class="no">String</span>
    <span class="n">property</span> <span class="ss">:status</span><span class="p">,</span>      <span class="no">Enum</span><span class="p">[</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:open</span><span class="p">,</span> <span class="ss">:invalid</span><span class="p">,</span> <span class="ss">:complete</span> <span class="p">]</span>

    <span class="n">validates_presence_of</span> <span class="ss">:commit</span><span class="p">,</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="p">.</span><span class="nf">status</span> <span class="o">==</span> <span class="ss">:complete</span> <span class="p">}</span>
  <span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The autovalidation that requires the title to be present will always run, but
the <code class="highlighter-rouge">validates_presence_of</code> on the commit hash will only run if the status is
<code class="highlighter-rouge">:complete</code>. Another example might be a change summary that is only required if
the resource is already thereâ€“â€˜initial commitâ€™ is hardly an enlightening
message.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="n">validates_length_of</span> <span class="ss">:change_summary</span><span class="p">,</span> <span class="ss">:min</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">:unless</span> <span class="o">=&gt;</span> <span class="ss">:new?</span></code></pre></figure>

<p>Sometimes a simple on and off switch is not enough, and so â€¦</p>

<h2 id="contextual-validations">Contextual Validations</h2>

<p>DataMapper Validations also provide a means of grouping your validations into
contexts. This enables you to run different sets of validations under different
contexts. All validations are performed in a context, even the auto-validations.
This context is the <code class="highlighter-rouge">:default</code> context. Unless you specify otherwise, any
validations added will be added to the <code class="highlighter-rouge">:default</code> context and the <code class="highlighter-rouge">valid?</code>
method checks all the validations in this context.</p>

<p>One example might be differing standards for saving a draft version of an
article, compared with the full and ready to publish article. A published
article has a title, a body of over 1000 characters, and a sidebar picture. A
draft article just needs a title and some kind of body. The length and the
sidebar picture we can supply later. Thereâ€™s also a <code class="highlighter-rouge">published</code> property, which
is used as part of queries to select articles for public display.</p>

<p>To set a context on a validation, we use the <code class="highlighter-rouge">:when</code> option. It might also be
desirable to set <code class="highlighter-rouge">:auto_validation =&gt; false</code> on the properties concerned,
especially if weâ€™re messing with default validations.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
</pre></td><td class="code"><pre>  <span class="k">class</span> <span class="nc">Article</span>
    <span class="kp">include</span> <span class="no">DataMapper</span><span class="o">::</span><span class="no">Resource</span>

    <span class="n">property</span> <span class="ss">:id</span><span class="p">,</span>          <span class="no">Serial</span>
    <span class="n">property</span> <span class="ss">:title</span><span class="p">,</span>       <span class="no">String</span>
    <span class="n">property</span> <span class="ss">:picture_url</span><span class="p">,</span> <span class="no">String</span>
    <span class="n">property</span> <span class="ss">:body</span><span class="p">,</span>        <span class="no">Text</span>
    <span class="n">property</span> <span class="ss">:published</span><span class="p">,</span>   <span class="no">Boolean</span>

    <span class="c1"># validations</span>
    <span class="n">validates_presence_of</span> <span class="ss">:title</span><span class="p">,</span>       <span class="ss">:when</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="ss">:draft</span><span class="p">,</span> <span class="ss">:publish</span> <span class="p">]</span>
    <span class="n">validates_presence_of</span> <span class="ss">:picture_url</span><span class="p">,</span> <span class="ss">:when</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="ss">:publish</span> <span class="p">]</span>
    <span class="n">validates_presence_of</span> <span class="ss">:body</span><span class="p">,</span>        <span class="ss">:when</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="ss">:draft</span><span class="p">,</span> <span class="ss">:publish</span> <span class="p">]</span>
    <span class="n">validates_length_of</span>   <span class="ss">:body</span><span class="p">,</span>        <span class="ss">:when</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="ss">:publish</span> <span class="p">],</span> <span class="ss">:minimum</span> <span class="o">=&gt;</span> <span class="mi">1000</span>
    <span class="n">validates_absence_of</span>  <span class="ss">:published</span><span class="p">,</span>   <span class="ss">:when</span> <span class="o">=&gt;</span> <span class="p">[</span> <span class="ss">:draft</span> <span class="p">]</span>
  <span class="k">end</span>

  <span class="c1"># and now some results</span>
  <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="p">.</span><span class="nf">new</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">valid?</span><span class="p">(</span><span class="ss">:draft</span><span class="p">)</span>
  <span class="c1"># =&gt; false.  We have no title, for a start.</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">valid_for_publish?</span>
  <span class="c1"># =&gt; false.  We have no title, amongst many other issues.</span>
  <span class="c1"># valid_for_publish? is provided shorthand for valid?(:publish)</span>

  <span class="c1"># now set some properties</span>
  <span class="vi">@article</span><span class="p">.</span><span class="nf">title</span> <span class="o">=</span> <span class="s1">'DataMapper is awesome because ...'</span>
  <span class="vi">@article</span><span class="p">.</span><span class="nf">body</span>  <span class="o">=</span> <span class="s1">'Well, where to begin ...'</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">valid?</span><span class="p">(</span><span class="ss">:draft</span><span class="p">)</span>
  <span class="c1"># =&gt; true.  We have a title, and a little body</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">valid?</span><span class="p">(</span><span class="ss">:publish</span><span class="p">)</span>
  <span class="c1"># =&gt; false.  Our body isn't long enough yet.</span>

  <span class="c1"># save our article in the :draft context</span>
  <span class="vi">@article</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="ss">:draft</span><span class="p">)</span>
  <span class="c1"># =&gt; true</span>

  <span class="c1"># set some more properties</span>
  <span class="vi">@article</span><span class="p">.</span><span class="nf">picture_url</span> <span class="o">=</span> <span class="s1">'http://www.greatpictures.com/flower.jpg'</span>
  <span class="vi">@article</span><span class="p">.</span><span class="nf">body</span>        <span class="o">=</span> <span class="n">an_essay_about_why_datamapper_rocks</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">valid?</span><span class="p">(</span><span class="ss">:draft</span><span class="p">)</span>
  <span class="c1"># =&gt; true.  Nothing wrong still</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">valid?</span><span class="p">(</span><span class="ss">:publish</span><span class="p">)</span>
  <span class="c1"># =&gt; true.  We have everything we need for a full article to be published!</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">published</span> <span class="o">=</span> <span class="kp">true</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="ss">:draft</span><span class="p">)</span>
  <span class="c1"># =&gt; false.  We set the published to true, so we can't save this as a draft.</span>
  <span class="c1"># As long as our drafting method always saves with the :draft context, we won't ever</span>
  <span class="c1"># accidentally save a half finished draft that the public will see.</span>

  <span class="vi">@article</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="ss">:publish</span><span class="p">)</span>
  <span class="c1"># =&gt; true</span>
  <span class="c1"># we can save it just fine as a published article though.</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>That was a long example, but it shows how to set up validations in differing
contexts and also how to save in a particular context. <em>One thing to be careful
of when saving in a context is to make sure that any database level constraints,
such as a <code class="highlighter-rouge">NOT NULL</code> column definition in a database, are checked in that
context, or a data-store error may ensue.</em></p>

<h2 id="setting-properties-before-validation">Setting Properties Before Validation</h2>

<p>It is sometimes necessary to set properties before a resource is saved or
validated. Perhaps a required property can have a default value set from other
properties or derived from the environment. To set these properties, a <code class="highlighter-rouge">before :valid?</code>
<a href="/docs/callbacks">hook</a> should be used.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>  <span class="k">class</span> <span class="nc">Article</span>
    <span class="kp">include</span> <span class="no">DataMapper</span><span class="o">::</span><span class="no">Resource</span>

    <span class="n">property</span> <span class="ss">:id</span><span class="p">,</span>        <span class="no">Serial</span>
    <span class="n">property</span> <span class="ss">:title</span><span class="p">,</span>     <span class="no">String</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span>
    <span class="n">property</span> <span class="ss">:permalink</span><span class="p">,</span> <span class="no">String</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span>

    <span class="n">before</span> <span class="ss">:valid?</span><span class="p">,</span> <span class="ss">:set_permalink</span>

    <span class="c1"># our callback needs to accept the context used in the validation,</span>
    <span class="c1"># even if it ignores it, as #save calls #valid? with a context.</span>
    <span class="k">def</span> <span class="nf">set_permalink</span><span class="p">(</span><span class="n">context</span> <span class="o">=</span> <span class="ss">:default</span><span class="p">)</span>
      <span class="nb">self</span><span class="p">.</span><span class="nf">permalink</span> <span class="o">=</span> <span class="n">title</span><span class="p">.</span><span class="nf">gsub</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">,</span> <span class="s1">'-'</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Be careful not to <code class="highlighter-rouge">save</code> your resource in these kinds of methods, or your
application will spin off into infinite trying to save your object while saving
your object.</p>
:ET