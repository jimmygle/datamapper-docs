I"ª<h1 id="dm-aggregates">DM-Aggregates</h1>

<p>DM-Aggregates provides a reporting API which offers aggregating functions like
<code class="highlighter-rouge">count</code>, <code class="highlighter-rouge">min</code>, <code class="highlighter-rouge">max</code>, <code class="highlighter-rouge">avg</code>, <code class="highlighter-rouge">sum</code>, and <code class="highlighter-rouge">aggregate</code>.</p>

<h3 id="setup">Setup</h3>

<p>Simply <code class="highlighter-rouge">require 'dm-aggregates'</code> somewhere before you connect to your data-store
and youâ€™re ready to go.</p>

<h3 id="count">Count</h3>

<p>You can issue a totaling query with DM-Aggregates in a couple of ways. First,
you can build a totaling query off of your Resource:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="no">Dragon</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="ss">:homes_destroyed</span><span class="p">.</span><span class="nf">lte</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">)</span></code></pre></figure>

<p>Secondly, you can call <code class="highlighter-rouge">count</code> off of a pre-build query object.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="no">Dragon</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="ss">:age</span><span class="p">.</span><span class="nf">lte</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">).</span><span class="nf">count</span></code></pre></figure>

<p>Your query will become a totaling query without having to retrieve the objects
and total on the retrieved array. These two approaches can be combined as well.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="no">Dragon</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="ss">:homes_destroyed</span><span class="p">.</span><span class="nf">lte</span> <span class="o">=&gt;</span> <span class="mi">12</span><span class="p">).</span><span class="nf">count</span><span class="p">(</span><span class="ss">:rating</span> <span class="o">=&gt;</span> <span class="s1">'amateur'</span><span class="p">)</span></code></pre></figure>

<h3 id="min-max">Min, Max</h3>

<p>Minimum and Maximum values from fields in your data-store can be retrieved by
specifying which property you want to retrieve the value from.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="no">Dragon</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="ss">:homes_destroyed</span><span class="p">)</span>
  <span class="no">Dragon</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="ss">:homes_destroyed</span><span class="p">)</span></code></pre></figure>

<p>Further conditions to your min and max queries are simply supplied after the
property.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="no">Dragon</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="ss">:homes_destroyed</span><span class="p">,</span> <span class="ss">:battles_won</span><span class="p">.</span><span class="nf">gte</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">)</span>
  <span class="no">Dragon</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="ss">:homes_destroyed</span><span class="p">,</span> <span class="ss">:title</span><span class="p">.</span><span class="nf">not</span> <span class="o">=&gt;</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">:nickname</span><span class="p">.</span><span class="nf">like</span> <span class="o">=&gt;</span> <span class="s2">"%puff%"</span><span class="p">)</span></code></pre></figure>

<h3 id="sum-average">Sum, Average</h3>

<p>Both <code class="highlighter-rouge">sum</code>, and <code class="highlighter-rouge">avg</code> work very similarly to <code class="highlighter-rouge">min</code> and <code class="highlighter-rouge">max</code>.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="no">Dragon</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="ss">:toes_on_claw</span><span class="p">)</span>
  <span class="no">Dragon</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="ss">:toes_on_claw</span><span class="p">,</span> <span class="ss">:is_fire_breathing</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span>

  <span class="no">Dragon</span><span class="p">.</span><span class="nf">avg</span><span class="p">(</span><span class="ss">:toes_on_claw</span><span class="p">)</span>
  <span class="no">Dragon</span><span class="p">.</span><span class="nf">avg</span><span class="p">(</span><span class="ss">:toes_on_claw</span><span class="p">,</span> <span class="ss">:is_fire_breathing</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">)</span></code></pre></figure>

<h3 id="aggregate">Aggregate</h3>

<p>The <code class="highlighter-rouge">aggregate</code> method will let you combine all of the other aggregating methods
together to retrieve in one call to the data-store. DM-Aggregates adds in a few
extra symbol operators in order to enable this.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="no">Dragon</span><span class="p">.</span><span class="nf">aggregate</span><span class="p">(</span><span class="ss">:all</span><span class="p">.</span><span class="nf">count</span><span class="p">,</span> <span class="ss">:name</span><span class="p">.</span><span class="nf">count</span><span class="p">,</span> <span class="ss">:toes_on_claw</span><span class="p">.</span><span class="nf">min</span><span class="p">,</span>
    <span class="ss">:toes_on_claw</span><span class="p">.</span><span class="nf">max</span><span class="p">,</span> <span class="ss">:toes_on_claw</span><span class="p">.</span><span class="nf">avg</span><span class="p">,</span> <span class="ss">:toes_on_claw</span><span class="p">.</span><span class="nf">sum</span><span class="p">,</span>
    <span class="ss">:is_fire_breathing</span><span class="p">)</span>
  <span class="c1"># [</span>
  <span class="c1">#   [ 1, 1, 3, 3, 3.0, 3, false ],</span>
  <span class="c1">#   [ 2, 1, 4, 5, 4.5, 9, true ]</span>
  <span class="c1"># ]</span></code></pre></figure>

<p>This will compile all of the aggregating queries together and return them in an
array of arrays.</p>
:ET